{"version":3,"file":"SFBulkAPIJobs.jssp","sources":["../src/sfJob.ts","../src/SFBulkAPIJobs.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\nimport { executexhr, Readxhr } from \"./common\";\r\n \r\nexport var jobFunctions = {\r\n        displayName: \"Salesforce Job Functions\",\r\n        description: \"Salesforce Job Functions\",\r\n        properties: {\r\n          jobId:{\r\n            displayName: \"Job Id\",\r\n            type: \"string\",\r\n          },\r\n          resultCode:{\r\n            displayName: \"Result Code\",\r\n            type: \"string\",\r\n          },\r\n          message:{\r\n            displayName: \"Message\",\r\n            type: \"extendedString\",\r\n          },\r\n          csvFile:{\r\n            displayName: \"CSV File\",\r\n            type: \"attachment\",\r\n          },\r\n          csvFileContent:{\r\n            displayName: \"File Content\",\r\n            type: \"extendedString\",\r\n          },\r\n          oldHeader:{\r\n            displayName: \"Old Header\",\r\n            type: \"extendedString\",\r\n          },\r\n          newHeader:{\r\n            displayName: \"New Header\",\r\n            type: \"extendedString\",\r\n          },\r\n          sobrId:{\r\n            displayName: \"SOBRID\",\r\n            type: \"string\",\r\n          },\r\n          csvString:{\r\n            displayName: \"CSV string\",\r\n            type: \"extendedString\",\r\n          },\r\n        },\r\n        methods: {\r\n            createJob: {\r\n                displayName: \"Create a New Job\",\r\n                type: \"execute\",\r\n                parameters:{\r\n                    instanceUrl: {\r\n                        displayName: \"Instance URL\",\r\n                        type: \"extendedString\",\r\n                      },\r\n                      version:{\r\n                        displayName: \"Version\",\r\n                        type: \"string\",\r\n                      },\r\n                      token:{\r\n                        displayName: \"Token\",\r\n                        type: \"string\",\r\n                      },\r\n                      sfobject:{\r\n                        displayName: \"SF Object\",\r\n                        type: \"string\",\r\n                      },\r\n                      le:{\r\n                        displayName: \"Line Ending\",\r\n                        type: \"string\",\r\n                      },\r\n                    },\r\n               // requiredParameters:[\"instanceUrl\", \"version\", \"token\"],\r\n                inputs: [],\r\n                //requiredInputs: [\"jobId\"],\r\n                outputs: [\"jobId\", \"resultCode\", \"message\"],\r\n              },\r\n         updateJobState: {\r\n            displayName: \"Update Job State\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\", \"token\"],\r\n            inputs: [\"jobId\"],\r\n            //requiredInputs: [\"jobId\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n          uploadJobData: {\r\n            displayName: \"Upload Job Data\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\"],\r\n            inputs: [\"jobId\", \"csvFile\"],\r\n            //requiredInputs: [\"jobId\", \"csvFile\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n          convertAndUploadJobData: {\r\n            displayName: \"Convert and Upload Job Data\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\"],\r\n            inputs: [\"jobId\", \"oldHeader\", \"newHeader\", \"sobrId\", \"csvFileContent\"],\r\n            //requiredInputs: [\"jobId\", \"csvFile\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n          createCSVAndUploadJobData: {\r\n            displayName: \"Create CSV and Upload Job Data\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\"],\r\n            inputs: [\"jobId\", \"csvString\"],\r\n            //requiredInputs: [\"jobId\", \"csvFile\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n        },\r\n      } as ServiceObject; \r\n \r\n\r\nexport async function onexecuteJobFunctions(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord,\r\n  configuration: SingleRecord\r\n) {\r\n  switch (methodName) {\r\n    case \"updateJobState\":\r\n        await onexecuteUpdateJobState(parameters, properties, configuration);\r\n        break;\r\n    case \"uploadJobData\":\r\n        await onexecuteUploadJobData(parameters, properties, configuration);\r\n        break;\r\n    case \"convertAndUploadJobData\":\r\n            await onexecuteConvertAndUploadJobData(parameters, properties, configuration);\r\n            break;\r\n    case \"createJob\":\r\n            await onexecuteCreateJob(parameters, properties, configuration);\r\n            break;\r\n    case \"createCSVAndUploadJobData\":\r\n            await onexecutecreateCSVAndUploadJobData(parameters, properties, configuration);\r\n            break;\r\n            \r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n \r\nexport function onexecuteUpdateJobState(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n        var data = JSON.stringify({\r\n            \"state\": \"UploadComplete\"\r\n          });\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.withCredentials = true;\r\n \r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState !== 4) return;\r\n            if (xhr.status !== 200) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n            postResult({\r\n                resultCode: xhr.status,\r\n                message: xhr.statusText\r\n            });\r\n        };\r\n \r\n        xhr.open(\"PATCH\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"]);\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        \r\n        return xhr.send(data);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n \r\n\r\nexport function onexecuteCreateJob(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      try {\r\n        console.log(parameters[\"sfobject\"]);\r\n        var data = JSON.stringify({\r\n            \"object\": parameters[\"sfobject\"],\r\n            \"contentType\": \"CSV\",\r\n            \"operation\": \"insert\",\r\n            \"lineEnding\": parameters[\"le\"],\r\n          });\r\n \r\n          var xhr = new XMLHttpRequest();\r\n          xhr.withCredentials = true;\r\n  \r\n          xhr.onreadystatechange = function () {\r\n              if (xhr.readyState !== 4) return;\r\n              if (xhr.status !== 200) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n              let respJSON = JSON.parse(xhr.responseText);\r\n \r\n\r\n \r\n              postResult({\r\n                  jobId:respJSON.id,\r\n                  resultCode: xhr.status,\r\n                  message: xhr.statusText\r\n              });\r\n          };\r\n  \r\n          xhr.open(\"POST\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest\");\r\n          xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n          \r\n          return xhr.send(data);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n \r\n  export function onexecuteUploadJobData(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      try {\r\n        var xhr = new XMLHttpRequest();\r\n        // var csvFile = properties[\"csvFile\"];\r\n        // var form = new FormData();\r\n        // form.append('file', csvFile.content);\r\n \r\n        xhr.withCredentials = true;\r\n \r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState !== 4) return;\r\n            if (xhr.status !== 201) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n            postResult({\r\n                resultCode: xhr.status,\r\n                message: xhr.statusText\r\n                /*\"modifiedDate\": new Date(data.modified_at),\r\n                \"File\": {\r\n                    filename: data.name,\r\n                    content: xhr.response\r\n                }*/\r\n            });\r\n        };\r\n \r\n        xhr.open(\"PUT\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n        xhr.setRequestHeader(\"Content-Type\", \"text/csv\");\r\n        \r\n        return xhr.send(properties[\"csvFile\"]);\r\n  \r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\nexport function onexecutecreateCSVAndUploadJobData(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n      var xhr = new XMLHttpRequest();\r\n      var csv = properties[\"csvString\"].toString();\r\n //     workingCsvStr = workingCsvStr.replace(new RegExp('\\n', 'g'), '\\n' + sobrId+ ',');\r\n //csv = csv.replace(new RegExp(/\\$LB\\//gm), '\\r\\n');\r\n csv = csv.replace(new RegExp(/\\$LB\\//gm), '\\n');\r\n      xhr.withCredentials = true;\r\n      xhr.onreadystatechange = function () {\r\n          if (xhr.readyState !== 4) return;\r\n          if (xhr.status !== 201) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n          postResult({\r\n              resultCode: xhr.status,\r\n              message: xhr.statusText\r\n              /*\"modifiedDate\": new Date(data.modified_at),\r\n              \"File\": {\r\n                  filename: data.name,\r\n                  content: xhr.response\r\n              }*/\r\n          });\r\n      };\r\n\r\n      xhr.open(\"PUT\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n      xhr.setRequestHeader(\"Content-Type\", \"text/csv\");\r\n      console.log(\"Posted CSV: \" + csv);\r\n      return xhr.send(csv);\r\n\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n \r\nfunction getBase64FromContent(content: string)\r\n{\r\n    var base64 = \"\";\r\n    var split1 = content.split(\"<content>\")[1];\r\n \r\n    base64 = split1.split(\"</content>\")[0];\r\n \r\n    return base64;\r\n}\r\n \r\nexport function onexecuteConvertAndUploadJobData(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      try {\r\n        const csvStr = Base64.decode(getBase64FromContent(properties[\"csvFileContent\"].toString()));\r\n  //      console.log(\"CSV Length:\" + csvStr.length.toString());\r\n  //      console.log(\"CSV:\" + csvStr);\r\n \r\n        var oldHdr = properties[\"oldHeader\"].toString();\r\n        var newHdr = properties[\"newHeader\"].toString();\r\n        var sobrId = properties[\"sobrId\"].toString();\r\n  \r\n        var workingCsvStr = csvStr.replace(oldHdr, \"\");\r\n        //workingCsvStr = workingCsvStr.replace('\\n', '\\n' + sobrId+ ',');\r\n        workingCsvStr = workingCsvStr.replace(new RegExp('\\n', 'g'), '\\n' + sobrId+ ',');\r\n        \r\n //       console.log(\"CSV Pre Header:\" + workingCsvStr);\r\n \r\n        workingCsvStr = newHdr + workingCsvStr;\r\n \r\n  //      console.log(\"CSV fixed:\" + workingCsvStr);\r\n \r\n        var xhr = new XMLHttpRequest();\r\n \r\n        xhr.withCredentials = true;\r\n \r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState !== 4) return;\r\n            if (xhr.status !== 201) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n            postResult({\r\n                resultCode: xhr.status,\r\n                message: xhr.statusText\r\n            });\r\n        };\r\n \r\n//        console.log(\"URL:\" + parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n        \r\n        xhr.open(\"PUT\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n        xhr.setRequestHeader(\"Content-Type\", \"text/csv\");\r\n        \r\n        return xhr.send(workingCsvStr);\r\n  \r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n \r\nvar Base64 = {\r\n \r\n    // private property\r\n    _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n    \r\n    // public method for encoding\r\n    encode : function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n    \r\n        input = Base64._utf8_encode(input);\r\n    \r\n        while (i < input.length) {\r\n    \r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n    \r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n    \r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n    \r\n            output = output +\r\n            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n    \r\n        }\r\n    \r\n        return output;\r\n    },\r\n    \r\n    // public method for decoding\r\n    decode : function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n    \r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n    \r\n        while (i < input.length) {\r\n    \r\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\r\n    \r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n    \r\n            output = output + String.fromCharCode(chr1);\r\n    \r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n    \r\n        }\r\n    \r\n        output = Base64._utf8_decode(output);\r\n    \r\n        return output;\r\n    \r\n    },\r\n    \r\n    // private method for UTF-8 encoding\r\n    _utf8_encode : function (string) {\r\n        string = string.replace(/\\r\\n/g,\"\\n\");\r\n        var utftext = \"\";\r\n    \r\n        for (var n = 0; n < string.length; n++) {\r\n    \r\n            var c = string.charCodeAt(n);\r\n    \r\n            if (c < 128) {\r\n                utftext += String.fromCharCode(c);\r\n            }\r\n            else if((c > 127) && (c < 2048)) {\r\n                utftext += String.fromCharCode((c >> 6) | 192);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n            else {\r\n                utftext += String.fromCharCode((c >> 12) | 224);\r\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n    \r\n        }\r\n    \r\n        return utftext;\r\n    },\r\n    \r\n    // private method for UTF-8 decoding\r\n    _utf8_decode : function (utftext) {\r\n        var string = \"\";\r\n        var i = 0;\r\n        var c = 0, c1 = 0, c2 = 0, c3 = 0;\r\n    \r\n        while ( i < utftext.length ) {\r\n    \r\n            c = utftext.charCodeAt(i);\r\n    \r\n            if (c < 128) {\r\n                string += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if((c > 191) && (c < 224)) {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                c3 = utftext.charCodeAt(i+2);\r\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n    \r\n        }\r\n    \r\n        return string;\r\n    }\r\n    \r\n    }\r\n \r\n","import \"@k2oss/k2-broker-core\";\nimport {jobFunctions, onexecuteJobFunctions} from \"./sfJob\"\n\nmetadata = {\n  systemName: \"SFBulkAPIjobs\",\n  displayName: \"Salesforce Bulk API Functions\",\n  description: \"A Utility broker to upload content to the Salesforce BULK API\",\n  configuration : {\n    \"ServiceURL\" : {\n      \"displayName\": \"Service URL\",\n      \"type\": \"string\",\n      \"value\": \"https://www.cloudfunctions.net\"\n    }\n  }\n};\n\nondescribe = async function ({ configuration }): Promise<void> {\n  postSchema({\n    objects: {\n      jobFunctions\n    }\n  });\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n  switch(objectName){\n\n    case \"jobFunctions\" : await onexecuteJobFunctions(methodName, properties, parameters, configuration); break;\n    default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n  }\n}\n"],"names":["jobFunctions","displayName","description","properties","jobId","type","resultCode","message","csvFile","csvFileContent","oldHeader","newHeader","sobrId","csvString","methods","createJob","parameters","instanceUrl","version","token","sfobject","le","inputs","outputs","updateJobState","uploadJobData","convertAndUploadJobData","createCSVAndUploadJobData","onexecuteJobFunctions","methodName","configuration","onexecuteUpdateJobState","onexecuteUploadJobData","onexecuteConvertAndUploadJobData","onexecuteCreateJob","onexecutecreateCSVAndUploadJobData","Error","Promise","resolve","reject","data","JSON","stringify","xhr","XMLHttpRequest","withCredentials","onreadystatechange","readyState","status","concat","toString","statusText","response","postResult","open","setRequestHeader","send","e","console","log","respJSON","parse","responseText","id","csv","replace","RegExp","csvStr","Base64","decode","split","oldHdr","newHdr","workingCsvStr","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","_utf8_encode","length","charCodeAt","isNaN","this","charAt","indexOf","String","fromCharCode","_utf8_decode","string","utftext","n","c","c2","c3","metadata","systemName","ondescribe","postSchema","objects","onexecute","objectName"],"mappings":"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"}