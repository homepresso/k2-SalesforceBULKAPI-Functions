{"version":3,"file":"CSVUtilities.jssp","sources":["../src/base64.ts","../src/csv.ts","../src/sfJob.ts","../src/CSVUtilities.ts"],"sourcesContent":["export var Base64 = {\n\n    // private property\n    _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    \n    // public method for encoding\n    encode : function (input) {\n        var output = \"\";\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n        var i = 0;\n    \n        input = Base64._utf8_encode(input);\n    \n        while (i < input.length) {\n    \n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n    \n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n    \n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n    \n            output = output +\n            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n    \n        }\n    \n        return output;\n    },\n    \n    // public method for decoding\n    decode : function (input) {\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n    \n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n    \n        while (i < input.length) {\n    \n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n    \n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n    \n            output = output + String.fromCharCode(chr1);\n    \n            if (enc3 != 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 != 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n    \n        }\n    \n        output = Base64._utf8_decode(output);\n    \n        return output;\n    \n    },\n    \n    // private method for UTF-8 encoding\n    _utf8_encode : function (string) {\n        string = string.replace(/\\r\\n/g,\"\\n\");\n        var utftext = \"\";\n    \n        for (var n = 0; n < string.length; n++) {\n    \n            var c = string.charCodeAt(n);\n    \n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            }\n            else if((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n            else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n    \n        }\n    \n        return utftext;\n    },\n    \n    // private method for UTF-8 decoding\n    _utf8_decode : function (utftext) {\n        var string = \"\";\n        var i = 0;\n        var c = 0, c1 = 0, c2 = 0, c3 = 0;\n    \n        while ( i < utftext.length ) {\n    \n            c = utftext.charCodeAt(i);\n    \n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            }\n            else if((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i+1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            }\n            else {\n                c2 = utftext.charCodeAt(i+1);\n                c3 = utftext.charCodeAt(i+2);\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n                i += 3;\n            }\n    \n        }\n    \n        return string;\n    }\n    \n    }","import \"@k2oss/k2-broker-core\";\r\nimport {Base64} from \"./base64\";\r\nconst ID = \"id\";\r\nconst Name = \"Name\";\r\nconst Value = \"Value\";\r\nconst SFName = \"SFName\";\r\nconst SFValue = \"SFValue\";\r\nconst SFParentID = \"SFParentID\";\r\nconst SFCombinedString = \"SFCombinedString\";\r\nconst Column1 = \"column1\";\r\nconst Column2 = \"column2\";\r\nconst Column3 = \"column3\";\r\nconst Column4 = \"column4\";\r\nconst Column5 = \"column5\";\r\nconst Column6 = \"column6\";\r\nconst Column7 = \"column7\";\r\nconst Column8 = \"column8\";\r\nconst Column9 = \"column9\";\r\nconst Column10 = \"column10\";\r\nconst Column11 = \"column11\";\r\nconst Column12 = \"column12\";\r\nconst Column13 = \"column13\";\r\nconst Column14 = \"column14\";\r\nconst Column15 = \"column15\";\r\nconst Column16 = \"column16\";\r\nconst Column17 = \"column17\";\r\nconst Column18 = \"column18\";\r\nconst Column19 = \"column19\";\r\nconst Column20 = \"column20\";\r\nconst Column21 = \"column21\";\r\nconst Column22 = \"column22\";\r\nconst Column23 = \"column23\";\r\nconst Column24 = \"column24\";\r\nconst Column25 = \"column25\";\r\nconst Column26 = \"column26\";\r\nconst Column27 = \"column27\";\r\nconst Column28 = \"column28\";\r\nconst Column29 = \"column29\";\r\nconst Column30 = \"column30\";\r\nconst Column31 = \"column31\";\r\nconst Column32 = \"column32\";\r\nconst Column33 = \"column33\";\r\nconst Column34 = \"column34\";\r\nconst Column35 = \"column35\";\r\nconst Column36 = \"column36\";\r\nconst Column37 = \"column37\";\r\nconst Column38 = \"column38\";\r\nconst Column39 = \"column39\";\r\nconst Column40 = \"column40\";\r\nconst Column41 = \"column41\";\r\nconst Column42 = \"column42\";\r\nconst Column43 = \"column43\";\r\nconst Column44 = \"column44\";\r\nconst Column45 = \"column45\";\r\nconst Column46 = \"column46\";\r\nconst Column47 = \"column47\";\r\nconst Column48 = \"column48\";\r\nconst Column49 = \"column49\";\r\nconst Column50 = \"column50\";\r\nconst Column51 = \"column51\";\r\nconst Column52 = \"column52\";\r\nconst Column53 = \"column53\";\r\nconst Column54 = \"column54\";\r\nconst Column55 = \"column55\";\r\nconst Column56 = \"column56\";\r\nconst Column57 = \"column57\";\r\nconst Column58 = \"column58\";\r\nconst Column59 = \"column59\";\r\nconst Column60 = \"column60\";\r\nconst Column61 = \"column61\";\r\nconst ColumnCount = 61; \r\n\r\nconst ColumnName = \"ColumnName\";\r\n\r\n\r\n\r\n\r\nexport var csvFunctions = {\r\n        displayName: \"Read CSV as JSON\",\r\n        description: \"CSV to JSON Object\",\r\n\r\n        properties: {\r\n          csv: {\r\n            displayName: \"CSV File\",\r\n            type: \"extendedString\",\r\n          },\r\n          [ID]: {\r\n            displayName: \"ID\",\r\n            description: \"ID\",\r\n            type: \"number\"\r\n        },\r\n        [Name]: {\r\n          displayName: \"Name\",\r\n          description: \"Name\",\r\n          type: \"extendedString\"\r\n      },\r\n      [Value]: {\r\n        displayName: \"Value\",\r\n        description: \"Value\",\r\n        type: \"extendedString\"\r\n    },\r\n        [SFName]: {\r\n          displayName: \"SFName\",\r\n          description: \"Name\",\r\n          type: \"extendedString\"\r\n      },\r\n      [SFValue]: {\r\n        displayName: \"SFValue\",\r\n        description: \"Value\",\r\n        type: \"extendedString\"\r\n    },\r\n    [SFParentID]: {\r\n      displayName: \"SFParentID\",\r\n      description: \"ParentID\",\r\n      type: \"extendedString\"\r\n  },\r\n    [SFCombinedString]: {\r\n      displayName: \"SFCombinedString\",\r\n      description: \"CombinedString\",\r\n      type: \"extendedString\"\r\n  },\r\n          [Column1]: {\r\n            displayName: \"Column 1\",\r\n            description: \"Column 1\",\r\n            type: \"string\"\r\n        },\r\n        [Column2]: {\r\n            displayName: \"Column 2\",\r\n            description: \"Column 2\",\r\n            type: \"string\"\r\n        },\r\n        [Column3]: {\r\n            displayName: \"Column 3\",\r\n            description: \"Column 3\",\r\n            type: \"string\"\r\n        },\r\n        [Column4]: {\r\n            displayName: \"Column 4\",\r\n            description: \"Column 4\",\r\n            type: \"string\"\r\n        },\r\n        [Column5]: {\r\n            displayName: \"Column 5\",\r\n            description: \"Column 5\",\r\n            type: \"string\"\r\n        },\r\n        [Column6]: {\r\n            displayName: \"Column 6\",\r\n            description: \"Column 6\",\r\n            type: \"string\"\r\n        },\r\n        [Column7]: {\r\n            displayName: \"Column 7\",\r\n            description: \"Column 7\",\r\n            type: \"string\"\r\n        },\r\n        [Column8]: {\r\n            displayName: \"Column 8\",\r\n            description: \"Column 8\",\r\n            type: \"string\"\r\n        },\r\n        [Column9]: {\r\n            displayName: \"Column 9\",\r\n            description: \"Column 9\",\r\n            type: \"string\"\r\n        },\r\n        [Column10]: {\r\n            displayName: \"Column 10\",\r\n            description: \"Column 10\",\r\n            type: \"string\"\r\n        },\r\n        [Column11]: {\r\n            displayName: \"Column 11\",\r\n            description: \"Column 11\",\r\n            type: \"string\"\r\n        },\r\n        [Column12]: {\r\n            displayName: \"Column 12\",\r\n            description: \"Column 12\",\r\n            type: \"string\"\r\n        },\r\n        [Column13]: {\r\n            displayName: \"Column 13\",\r\n            description: \"Column 13\",\r\n            type: \"string\"\r\n        },\r\n        [Column14]: {\r\n            displayName: \"Column 14\",\r\n            description: \"Column 14\",\r\n            type: \"string\"\r\n        },\r\n        [Column15]: {\r\n            displayName: \"Column 15\",\r\n            description: \"Column 15\",\r\n            type: \"string\"\r\n        },\r\n        [Column16]: {\r\n            displayName: \"Column 16\",\r\n            description: \"Column 16\",\r\n            type: \"string\"\r\n        },\r\n        [Column17]: {\r\n            displayName: \"Column 17\",\r\n            description: \"Column 17\",\r\n            type: \"string\"\r\n        },\r\n        [Column18]: {\r\n            displayName: \"Column 18\",\r\n            description: \"Column 18\",\r\n            type: \"string\"\r\n        },\r\n        [Column19]: {\r\n            displayName: \"Column 19\",\r\n            description: \"Column 19\",\r\n            type: \"string\"\r\n        },\r\n        [Column20]: {\r\n            displayName: \"Column 20\",\r\n            description: \"Column 20\",\r\n            type: \"string\"\r\n        },\r\n        [Column21]: {\r\n          displayName: \"Column 21\",\r\n          description: \"Column 21\",\r\n          type: \"string\"\r\n      },\r\n      [Column22]: {\r\n        displayName: \"Column 22\",\r\n        description: \"Column 22\",\r\n        type: \"string\"\r\n    },\r\n    [Column23]: {\r\n      displayName: \"Column 23\",\r\n      description: \"Column 23\",\r\n      type: \"string\"\r\n  },\r\n  [Column24]: {\r\n    displayName: \"Column 24\",\r\n    description: \"Column 24\",\r\n    type: \"string\"\r\n},\r\n[Column25]: {\r\n  displayName: \"Column 25\",\r\n  description: \"Column 25\",\r\n  type: \"string\"\r\n},\r\n[Column26]: {\r\n  displayName: \"Column 26\",\r\n  description: \"Column 26\",\r\n  type: \"string\"\r\n},\r\n[Column27]: {\r\n  displayName: \"Column 27\",\r\n  description: \"Column 27\",\r\n  type: \"string\"\r\n},\r\n[Column28]: {\r\n  displayName: \"Column 28\",\r\n  description: \"Column 28\",\r\n  type: \"string\"\r\n},\r\n[Column29]: {\r\n  displayName: \"Column 29\",\r\n  description: \"Column 29\",\r\n  type: \"string\"\r\n},\r\n[Column30]: {\r\n  displayName: \"Column 30\",\r\n  description: \"Column 30\",\r\n  type: \"string\"\r\n},\r\n[Column31]: {\r\n  displayName: \"Column 31\",\r\n  description: \"Column 31\",\r\n  type: \"string\"\r\n},\r\n[Column32]: {\r\n  displayName: \"Column 32\",\r\n  description: \"Column 32\",\r\n  type: \"string\"\r\n},\r\n[Column33]: {\r\n  displayName: \"Column 33\",\r\n  description: \"Column 33\",\r\n  type: \"string\"\r\n},\r\n[Column34]: {\r\n  displayName: \"Column 34\",\r\n  description: \"Column 34\",\r\n  type: \"string\"\r\n},\r\n[Column35]: {\r\n  displayName: \"Column 35\",\r\n  description: \"Column 35\",\r\n  type: \"string\"\r\n},\r\n[Column36]: {\r\n  displayName: \"Column 36\",\r\n  description: \"Column 36\",\r\n  type: \"string\"\r\n},\r\n[Column37]: {\r\n  displayName: \"Column 37\",\r\n  description: \"Column 37\",\r\n  type: \"string\"\r\n},\r\n[Column38]: {\r\n  displayName: \"Column 38\",\r\n  description: \"Column 38\",\r\n  type: \"string\"\r\n},\r\n[Column39]: {\r\n  displayName: \"Column 39\",\r\n  description: \"Column 39\",\r\n  type: \"string\"\r\n},\r\n[Column40]: {\r\n  displayName: \"Column 40\",\r\n  description: \"Column 40\",\r\n  type: \"string\"\r\n},\r\n[Column41]: {\r\n  displayName: \"Column 41\",\r\n  description: \"Column 41\",\r\n  type: \"string\"\r\n},\r\n[Column42]: {\r\n  displayName: \"Column 42\",\r\n  description: \"Column 42\",\r\n  type: \"string\"\r\n},\r\n[Column43]: {\r\n  displayName: \"Column 43\",\r\n  description: \"Column 43\",\r\n  type: \"string\"\r\n},\r\n[Column44]: {\r\n  displayName: \"Column 44\",\r\n  description: \"Column 44\",\r\n  type: \"string\"\r\n},\r\n[Column45]: {\r\n  displayName: \"Column 45\",\r\n  description: \"Column 45\",\r\n  type: \"string\"\r\n},\r\n[Column46]: {\r\n  displayName: \"Column 46\",\r\n  description: \"Column 46\",\r\n  type: \"string\"\r\n},\r\n[Column47]: {\r\n  displayName: \"Column 47\",\r\n  description: \"Column 47\",\r\n  type: \"string\"\r\n},\r\n[Column48]: {\r\n  displayName: \"Column 48\",\r\n  description: \"Column 48\",\r\n  type: \"string\"\r\n},\r\n[Column49]: {\r\n  displayName: \"Column 49\",\r\n  description: \"Column 49\",\r\n  type: \"string\"\r\n},\r\n[Column50]: {\r\n  displayName: \"Column 50\",\r\n  description: \"Column 50\",\r\n  type: \"string\"\r\n},\r\n[Column51]: {\r\n  displayName: \"Column 51\",\r\n  description: \"Column 51\",\r\n  type: \"string\"\r\n},\r\n[Column52]: {\r\n  displayName: \"Column 52\",\r\n  description: \"Column 52\",\r\n  type: \"string\"\r\n},\r\n[Column53]: {\r\n  displayName: \"Column 53\",\r\n  description: \"Column 53\",\r\n  type: \"string\"\r\n},\r\n[Column54]: {\r\n  displayName: \"Column 54\",\r\n  description: \"Column 54\",\r\n  type: \"string\"\r\n},\r\n[Column55]: {\r\n  displayName: \"Column 55\",\r\n  description: \"Column 55\",\r\n  type: \"string\"\r\n},\r\n[Column56]: {\r\n  displayName: \"Column 56\",\r\n  description: \"Column 56\",\r\n  type: \"string\"\r\n},\r\n[Column57]: {\r\n  displayName: \"Column 57\",\r\n  description: \"Column 57\",\r\n  type: \"string\"\r\n},\r\n[Column58]: {\r\n  displayName: \"Column 58\",\r\n  description: \"Column 58\",\r\n  type: \"string\"\r\n},\r\n[Column59]: {\r\n  displayName: \"Column 59\",\r\n  description: \"Column 59\",\r\n  type: \"string\"\r\n},\r\n[Column60]: {\r\n  displayName: \"Column 60\",\r\n  description: \"Column 60\",\r\n  type: \"string\"\r\n},\r\n[Column61]: {\r\n  displayName: \"Column 61\",\r\n  description: \"Column 61\",\r\n  type: \"string\"\r\n},\r\n        [ColumnName]: {\r\n            displayName: \"Column Index\",\r\n            description: \"Column Index\",\r\n            type: \"string\"\r\n        },\r\n          output: {\r\n            displayName: \"Output\",\r\n            type: \"extendedString\",\r\n          }\r\n        },\r\n        methods: {\r\n          readCSV: {\r\n            displayName: \"Read CSV\",\r\n            type: \"list\",\r\n            inputs: [\"csv\"],\r\n            outputs: [ID, Column1, Column2, Column3, Column4, Column5, Column6, Column7, Column8, Column9, Column10, Column11, Column12, Column13, Column14, Column15, Column16, Column17, Column18, Column19, Column20, Column21, Column22, Column23, Column24, Column25, Column26, Column27, Column28, Column29, Column30, Column31, Column32, Column33, Column34, Column35, Column36, Column37, Column38, Column39, Column40, Column41, Column42, Column43, Column44, Column45, Column46, Column47, Column48, Column49, Column50, Column51, Column52, Column53, Column54, Column55, Column56, Column57, Column58, Column59, Column60, Column61]\r\n          },\r\n          readCsvRow: {\r\n            displayName: \"Get a Row from CSV File\",\r\n            type: \"read\",\r\n            inputs: [\"csv\", \"id\"],\r\n            outputs: [\"id\", \"column1\",\"column2\",\"column3\",\"column4\",\"column5\",\"column6\",\"column7\",\"column8\",\"column9\",\"column10\",\"column11\",\"column12\",\"column13\",\"column14\",\"column15\",\"column16\",\"column17\",\"column18\",\"column19\",\"column20\",\"column21\",\"column22\",\"column23\",\"column24\",\"column25\",\"column26\",\"column27\",\"column28\",\"column29\",\"column30\",\"column31\",\"column32\",\"column33\",\"column34\",\"column35\",\"column36\",\"column37\",\"column38\",\"column39\",\"column40\",\"column41\",\"column42\",\"column43\",\"column44\",\"column45\",\"column46\",\"column47\",\"column48\",\"column49\",\"column50\",\"column51\",\"column52\", \"column53\", \"column54\", \"column55\", \"column56\", \"column57\", \"column58\", \"column59\", \"column60\", \"column61\"],\r\n          },\r\n          listHeaders: {\r\n            displayName: \"List Headers from CSV\",\r\n            type: \"list\",\r\n            inputs: [\"csv\", \"id\"],\r\n            outputs: [ID, Name, Value]\r\n          },\r\n          readRowHeaders: {\r\n            displayName: \"Read Header row from CSV\",\r\n            type: \"read\",\r\n            inputs: [\"csv\", \"id\"],\r\n            outputs: [ID, Name, Value]\r\n          },\r\n          combineString: {\r\n            displayName: \"Combine Strings for BULK API Upload\",\r\n            type: \"read\",\r\n            inputs: [ \"SFParentID\", \"SFValue\", \"SFName\"],\r\n            outputs: [SFCombinedString]\r\n          },\r\n        },\r\n      } as ServiceObject; \r\n\r\n\r\nexport async function onexecuteCSVFunctions(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord,\r\n  configuration: SingleRecord\r\n) {\r\n  switch (methodName) {\r\n    case \"readCSV\":\r\n      await onexecuteReadCsv(properties, configuration);\r\n      break;\r\n      case \"readCsvRow\":\r\n        await onexecuteReadCSVRow(parameters, properties, configuration);\r\n        break;\r\n        case \"listHeaders\":\r\n        await onexecutelistHeaders(parameters, properties, configuration);\r\n        break;\r\n        case \"combineString\":\r\n        await onexecutecombineString(parameters, properties, configuration);\r\n        break;\r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n\r\nfunction getBase64FromContent(content: string)\r\n{\r\n    var base64 = \"\";\r\n    var split1 = content.split(\"<content>\")[1];\r\n\r\n    base64 = split1.split(\"</content>\")[0];\r\n\r\n    return base64;\r\n}\r\n\r\nexport function onexecutecombineString(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n\r\nconsole.log(\"executed\")\r\nvar combined = \"\";\r\n\r\nvar pnames = properties[SFName].toString();\r\nvar pvalue = properties[SFValue].toString();\r\n//var psfparentID = properties[\"SFParentID\"].toString();\r\n\r\n    var names = pnames.split(\",\");\r\n    var values = pvalue.split(\",\");\r\n\r\n\r\n    for (var i=0; i<names.length; i++) {\r\n\r\n      combined += properties[\"SFParentID\"] + \",\" + names[i] + \",\" + values[i] + \"\\n\";\r\n\r\n      \r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\npostResult({SFCombinedString: combined});\r\n    resolve();\r\n    } \r\n\r\n\r\n)};\r\n\r\n\r\n\r\n\r\nexport function onexecuteReadCsv(properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n\r\n      const csv = Base64.decode(getBase64FromContent(properties[\"csv\"].toString()));\r\n\r\n\r\n      var lines=csv.split('\\n');\r\n      var reg = new RegExp('\"', 'g');\r\n\r\n          var counter = 0;\r\n          var obj = lines.map(x => {\r\n            let obj = {};\r\n            counter = counter + 1;\r\n            \r\n            var cells = x.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n\r\n            obj[\"id\"] = counter;\r\n\r\n            for (var i = 0; i < cells.length; i++) {\r\n\r\n        //      console.log(i);\r\n                if ((i + 1) < ColumnCount) {\r\n\r\n                    obj[\"column\" + (i + 1)] = cells[i].replace(reg, '');\r\n           \r\n                }\r\n            }\r\n          \r\n     //       console.log(obj);\r\n            return obj;\r\n        }); \r\n\r\n        postResult(obj);\r\n\r\n\r\n      resolve();\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n    \r\n    });\r\n}\r\n\r\nexport function onexecutelistHeaders(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n      const csvStr = Base64.decode(getBase64FromContent(properties[\"csv\"].toString()));\r\n      var reg = new RegExp('\"', 'g');\r\n      var lines = [];\r\n      var indexToFind: number = + properties[\"id\"];\r\n  //    console.log(indexToFind);\r\n\r\n\r\n      var counter = 0;\r\n      lines = csvStr.split(/\\r?\\n/);\r\n       var headerRow = lines[0];\r\n       var workingRow = lines[indexToFind - 1];\r\n\r\n       let resobj = {};\r\n        \r\n\r\n        var workingCells = workingRow.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n        var headerCells = headerRow.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n        \r\n        resobj = headerCells.map(x => {let objArr = {}; objArr[Name] = x; return objArr;});\r\n\r\n        for (var i = 0; i < workingCells.length; i++) {\r\n                      if ((i + 1) < ColumnCount) {\r\n                        resobj[i][ID] = i + 1;\r\n                        resobj[i][Value] = workingCells[i].replace(reg, '');\r\n        //                console.log(resobj[i][Name]);\r\n         //               console.log(resobj[i][Value]);\r\n                      }\r\n                  }\r\n//console.log(resobj);\r\n    postResult(resobj);\r\n\r\n      resolve();\r\n  } catch (e) {\r\n    reject(e);\r\n  }\r\n    \r\n    });\r\n}\r\n\r\nexport function onexecutereadRowHeaders(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n      const csvStr = Base64.decode(getBase64FromContent(properties[\"csv\"].toString()));\r\n      var reg = new RegExp('\"', 'g');\r\n      var lines = [];\r\n      var indexToFind: number = + properties[ID];\r\n    //  console.log(indexToFind);\r\n\r\n\r\n      lines = csvStr.split(/\\r?\\n/);\r\n       var headerRow = lines[0];\r\n       var workingRow = lines[indexToFind - 1];\r\n\r\n       let objArr = {};\r\n        \r\n        var workingCells = workingRow.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n        var headerCells = headerRow.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n        objArr[ID] = indexToFind;\r\n        \r\n\r\n\r\n        for (var i = 0; i < workingCells.length; i++) {\r\n                      if ((i + 1) < ColumnCount) {\r\n\r\n                         objArr[i][ID] = i + 1;\r\n                         objArr[i][Value] = workingCells[i].replace(reg, '');\r\n                     //    console.log(objArr[i][Name]);\r\n                      //   console.log(objArr[i][Value]);\r\n                      }\r\n                  }\r\n//console.log(objArr);\r\n    postResult(objArr);\r\n\r\n      resolve();\r\n  } catch (e) {\r\n    reject(e);\r\n  }\r\n    \r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nexport function onexecuteReadCSVRow(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n        const csvStr = Base64.decode(getBase64FromContent(properties[\"csv\"].toString()));\r\n        var reg = new RegExp('\"', 'g');\r\n        var lines = [];\r\n        var indexToFind: number = + properties[\"id\"];\r\n\r\n        lines = csvStr.split(/\\r?\\n/);\r\n        \r\n         var workingRow = lines[indexToFind - 1];\r\n\r\n          let objArr = {};\r\n          var cells = workingRow.split(/,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n          objArr[\"id\"] = indexToFind;\r\n          for (var i = 0; i < cells.length; i++) {\r\n              if ((i + 1) < ColumnCount) {\r\n                objArr[\"column\" + (i + 1)] = cells[i].replace(reg, '');\r\n              }\r\n          }\r\n\r\n      postResult(objArr);\r\n\r\n        resolve();\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n","import \"@k2oss/k2-broker-core\";\r\nimport { executexhr, Readxhr } from \"./common\";\r\n \r\nexport var jobFunctions = {\r\n        displayName: \"Salesforce Job Functions\",\r\n        description: \"Salesforce Job Functions\",\r\n        properties: {\r\n          jobId:{\r\n            displayName: \"Job Id\",\r\n            type: \"string\",\r\n          },\r\n          resultCode:{\r\n            displayName: \"Result Code\",\r\n            type: \"string\",\r\n          },\r\n          message:{\r\n            displayName: \"Message\",\r\n            type: \"extendedString\",\r\n          },\r\n          csvFile:{\r\n            displayName: \"CSV File\",\r\n            type: \"attachment\",\r\n          },\r\n          csvFileContent:{\r\n            displayName: \"File Content\",\r\n            type: \"extendedString\",\r\n          },\r\n          oldHeader:{\r\n            displayName: \"Old Header\",\r\n            type: \"extendedString\",\r\n          },\r\n          newHeader:{\r\n            displayName: \"New Header\",\r\n            type: \"extendedString\",\r\n          },\r\n          sobrId:{\r\n            displayName: \"SOBRID\",\r\n            type: \"string\",\r\n          },\r\n          csvString:{\r\n            displayName: \"CSV string\",\r\n            type: \"extendedString\",\r\n          },\r\n        },\r\n        methods: {\r\n            createJob: {\r\n                displayName: \"Create a New Job\",\r\n                type: \"execute\",\r\n                parameters:{\r\n                    instanceUrl: {\r\n                        displayName: \"Instance URL\",\r\n                        type: \"extendedString\",\r\n                      },\r\n                      version:{\r\n                        displayName: \"Version\",\r\n                        type: \"string\",\r\n                      },\r\n                      token:{\r\n                        displayName: \"Token\",\r\n                        type: \"string\",\r\n                      },\r\n                      sfobject:{\r\n                        displayName: \"SF Object\",\r\n                        type: \"string\",\r\n                      },\r\n                      le:{\r\n                        displayName: \"Line Ending\",\r\n                        type: \"string\",\r\n                      },\r\n                    },\r\n               // requiredParameters:[\"instanceUrl\", \"version\", \"token\"],\r\n                inputs: [],\r\n                //requiredInputs: [\"jobId\"],\r\n                outputs: [\"jobId\", \"resultCode\", \"message\"],\r\n              },\r\n         updateJobState: {\r\n            displayName: \"Update Job State\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\", \"token\"],\r\n            inputs: [\"jobId\"],\r\n            //requiredInputs: [\"jobId\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n          uploadJobData: {\r\n            displayName: \"Upload Job Data\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\"],\r\n            inputs: [\"jobId\", \"csvFile\"],\r\n            //requiredInputs: [\"jobId\", \"csvFile\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n          convertAndUploadJobData: {\r\n            displayName: \"Convert and Upload Job Data\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\"],\r\n            inputs: [\"jobId\", \"oldHeader\", \"newHeader\", \"sobrId\", \"csvFileContent\"],\r\n            //requiredInputs: [\"jobId\", \"csvFile\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n          createCSVAndUploadJobData: {\r\n            displayName: \"Create CSV and Upload Job Data\",\r\n            type: \"execute\",\r\n            parameters:{\r\n                instanceUrl: {\r\n                    displayName: \"Instance URL\",\r\n                    type: \"extendedString\",\r\n                  },\r\n                  version:{\r\n                    displayName: \"Version\",\r\n                    type: \"string\",\r\n                  },\r\n                  token:{\r\n                    displayName: \"Token\",\r\n                    type: \"string\",\r\n                  },\r\n\r\n                },\r\n           // requiredParameters:[\"instanceUrl\", \"version\"],\r\n            inputs: [\"jobId\", \"csvString\"],\r\n            //requiredInputs: [\"jobId\", \"csvFile\"],\r\n            outputs: [\"resultCode\", \"message\"],\r\n          },\r\n        },\r\n      } as ServiceObject; \r\n \r\n\r\nexport async function onexecuteJobFunctions(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord,\r\n  configuration: SingleRecord\r\n) {\r\n  switch (methodName) {\r\n    case \"updateJobState\":\r\n        await onexecuteUpdateJobState(parameters, properties, configuration);\r\n        break;\r\n    case \"uploadJobData\":\r\n        await onexecuteUploadJobData(parameters, properties, configuration);\r\n        break;\r\n    case \"convertAndUploadJobData\":\r\n            await onexecuteConvertAndUploadJobData(parameters, properties, configuration);\r\n            break;\r\n    case \"createJob\":\r\n            await onexecuteCreateJob(parameters, properties, configuration);\r\n            break;\r\n    case \"createCSVAndUploadJobData\":\r\n            await onexecutecreateCSVAndUploadJobData(parameters, properties, configuration);\r\n            break;\r\n            \r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n \r\nexport function onexecuteUpdateJobState(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n        var data = JSON.stringify({\r\n            \"state\": \"UploadComplete\"\r\n          });\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.withCredentials = true;\r\n \r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState !== 4) return;\r\n            if (xhr.status !== 200) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n            postResult({\r\n                resultCode: xhr.status,\r\n                message: xhr.statusText\r\n            });\r\n        };\r\n \r\n        xhr.open(\"PATCH\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"]);\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        \r\n        return xhr.send(data);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n \r\n\r\nexport function onexecuteCreateJob(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      try {\r\n        console.log(parameters[\"sfobject\"]);\r\n        var data = JSON.stringify({\r\n            \"object\": parameters[\"sfobject\"],\r\n            \"contentType\": \"CSV\",\r\n            \"operation\": \"insert\",\r\n            \"lineEnding\": parameters[\"le\"],\r\n          });\r\n \r\n          var xhr = new XMLHttpRequest();\r\n          xhr.withCredentials = true;\r\n  \r\n          xhr.onreadystatechange = function () {\r\n              if (xhr.readyState !== 4) return;\r\n              if (xhr.status !== 200) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n              let respJSON = JSON.parse(xhr.responseText);\r\n \r\n\r\n \r\n              postResult({\r\n                  jobId:respJSON.id,\r\n                  resultCode: xhr.status,\r\n                  message: xhr.statusText\r\n              });\r\n          };\r\n  \r\n          xhr.open(\"POST\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest\");\r\n          xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n          \r\n          return xhr.send(data);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n \r\n  export function onexecuteUploadJobData(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      try {\r\n        var xhr = new XMLHttpRequest();\r\n        // var csvFile = properties[\"csvFile\"];\r\n        // var form = new FormData();\r\n        // form.append('file', csvFile.content);\r\n \r\n        xhr.withCredentials = true;\r\n \r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState !== 4) return;\r\n            if (xhr.status !== 201) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n            postResult({\r\n                resultCode: xhr.status,\r\n                message: xhr.statusText\r\n                /*\"modifiedDate\": new Date(data.modified_at),\r\n                \"File\": {\r\n                    filename: data.name,\r\n                    content: xhr.response\r\n                }*/\r\n            });\r\n        };\r\n \r\n        xhr.open(\"PUT\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n        xhr.setRequestHeader(\"Content-Type\", \"text/csv\");\r\n        \r\n        return xhr.send(properties[\"csvFile\"]);\r\n  \r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\nexport function onexecutecreateCSVAndUploadJobData(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n      var xhr = new XMLHttpRequest();\r\n      var csv = properties[\"csvString\"].toString();\r\n //     workingCsvStr = workingCsvStr.replace(new RegExp('\\n', 'g'), '\\n' + sobrId+ ',');\r\n //csv = csv.replace(new RegExp(/\\$LB\\//gm), '\\r\\n');\r\n csv = csv.replace(new RegExp(/\\$LB\\//gm), '\\n');\r\n      xhr.withCredentials = true;\r\n      xhr.onreadystatechange = function () {\r\n          if (xhr.readyState !== 4) return;\r\n          if (xhr.status !== 201) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n          postResult({\r\n              resultCode: xhr.status,\r\n              message: xhr.statusText\r\n              /*\"modifiedDate\": new Date(data.modified_at),\r\n              \"File\": {\r\n                  filename: data.name,\r\n                  content: xhr.response\r\n              }*/\r\n          });\r\n      };\r\n\r\n      xhr.open(\"PUT\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n      xhr.setRequestHeader(\"Content-Type\", \"text/csv\");\r\n      console.log(\"Posted CSV: \" + csv);\r\n      return xhr.send(csv);\r\n\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n \r\nfunction getBase64FromContent(content: string)\r\n{\r\n    var base64 = \"\";\r\n    var split1 = content.split(\"<content>\")[1];\r\n \r\n    base64 = split1.split(\"</content>\")[0];\r\n \r\n    return base64;\r\n}\r\n \r\nexport function onexecuteConvertAndUploadJobData(parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      try {\r\n        const csvStr = Base64.decode(getBase64FromContent(properties[\"csvFileContent\"].toString()));\r\n  //      console.log(\"CSV Length:\" + csvStr.length.toString());\r\n  //      console.log(\"CSV:\" + csvStr);\r\n \r\n        var oldHdr = properties[\"oldHeader\"].toString();\r\n        var newHdr = properties[\"newHeader\"].toString();\r\n        var sobrId = properties[\"sobrId\"].toString();\r\n  \r\n        var workingCsvStr = csvStr.replace(oldHdr, \"\");\r\n        //workingCsvStr = workingCsvStr.replace('\\n', '\\n' + sobrId+ ',');\r\n        workingCsvStr = workingCsvStr.replace(new RegExp('\\n', 'g'), '\\n' + sobrId+ ',');\r\n        \r\n //       console.log(\"CSV Pre Header:\" + workingCsvStr);\r\n \r\n        workingCsvStr = newHdr + workingCsvStr;\r\n \r\n  //      console.log(\"CSV fixed:\" + workingCsvStr);\r\n \r\n        var xhr = new XMLHttpRequest();\r\n \r\n        xhr.withCredentials = true;\r\n \r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState !== 4) return;\r\n            if (xhr.status !== 201) throw new Error(\"Failed with status \".concat(xhr.status.toString(), \" \").concat(xhr.statusText, \" and response \").concat(JSON.stringify(xhr.response), \" \"));\r\n            postResult({\r\n                resultCode: xhr.status,\r\n                message: xhr.statusText\r\n            });\r\n        };\r\n \r\n//        console.log(\"URL:\" + parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n        \r\n        xhr.open(\"PUT\", parameters[\"instanceUrl\"] + \"/services/data/\" + parameters[\"version\"] + \"/jobs/ingest/\" + properties[\"jobId\"] + \"/batches\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + parameters[\"token\"]);\r\n        xhr.setRequestHeader(\"Content-Type\", \"text/csv\");\r\n        \r\n        return xhr.send(workingCsvStr);\r\n  \r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n \r\nvar Base64 = {\r\n \r\n    // private property\r\n    _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n    \r\n    // public method for encoding\r\n    encode : function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n    \r\n        input = Base64._utf8_encode(input);\r\n    \r\n        while (i < input.length) {\r\n    \r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n    \r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n    \r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n    \r\n            output = output +\r\n            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n    \r\n        }\r\n    \r\n        return output;\r\n    },\r\n    \r\n    // public method for decoding\r\n    decode : function (input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n    \r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n    \r\n        while (i < input.length) {\r\n    \r\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\r\n    \r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n    \r\n            output = output + String.fromCharCode(chr1);\r\n    \r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n    \r\n        }\r\n    \r\n        output = Base64._utf8_decode(output);\r\n    \r\n        return output;\r\n    \r\n    },\r\n    \r\n    // private method for UTF-8 encoding\r\n    _utf8_encode : function (string) {\r\n        string = string.replace(/\\r\\n/g,\"\\n\");\r\n        var utftext = \"\";\r\n    \r\n        for (var n = 0; n < string.length; n++) {\r\n    \r\n            var c = string.charCodeAt(n);\r\n    \r\n            if (c < 128) {\r\n                utftext += String.fromCharCode(c);\r\n            }\r\n            else if((c > 127) && (c < 2048)) {\r\n                utftext += String.fromCharCode((c >> 6) | 192);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n            else {\r\n                utftext += String.fromCharCode((c >> 12) | 224);\r\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n    \r\n        }\r\n    \r\n        return utftext;\r\n    },\r\n    \r\n    // private method for UTF-8 decoding\r\n    _utf8_decode : function (utftext) {\r\n        var string = \"\";\r\n        var i = 0;\r\n        var c = 0, c1 = 0, c2 = 0, c3 = 0;\r\n    \r\n        while ( i < utftext.length ) {\r\n    \r\n            c = utftext.charCodeAt(i);\r\n    \r\n            if (c < 128) {\r\n                string += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if((c > 191) && (c < 224)) {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = utftext.charCodeAt(i+1);\r\n                c3 = utftext.charCodeAt(i+2);\r\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n    \r\n        }\r\n    \r\n        return string;\r\n    }\r\n    \r\n    }\r\n \r\n","import \"@k2oss/k2-broker-core\";\n/*import {stringFunctions, executeStringFunctions} from \"./so_StringFunctions\";\nimport {anyFCGMethod, executeanyFCGMethod} from \"./so_AnyMethod\";\nimport {graphQL, executeGraphql} from \"./so_Graphql\";\nimport {inspectionReport, executeInspectionReport} from \"./so_InspectionReport\"*/\nimport {csvFunctions, onexecuteCSVFunctions} from \"./csv\"\nimport {jobFunctions, onexecuteJobFunctions} from \"./sfJob\"\n\nmetadata = {\n  systemName: \"ReadCSVasJSON\",\n  displayName: \"Read CSV as JSON\",\n  description: \"A Utility broker using CSV in K2 Workflows\",\n  configuration : {\n    \"ServiceURL\" : {\n      \"displayName\": \"Service URL\",\n      \"type\": \"string\",\n      \"value\": \"https://www.cloudfunctions.net\"\n    }\n  }\n};\n\nondescribe = async function ({ configuration }): Promise<void> {\n  postSchema({\n    objects: {\n      //stringFunctions, anyFCGMethod, graphQL, inspectionReport, sfqlFunctions\n      csvFunctions, jobFunctions\n    }\n  });\n};\n\nonexecute = async function ({objectName, methodName, parameters, properties, configuration}): Promise<void> {\n  switch(objectName){\n    /*case \"stringFunctions\" : await executeStringFunctions(methodName, properties, parameters, configuration); break;\n    case \"anyFCGMethod\" : await executeanyFCGMethod(methodName, properties, parameters, configuration); break;\n    case \"graphQL\" : await executeGraphql(methodName, properties, parameters, configuration); break;\n    case \"inspectionReport\" : await executeInspectionReport(methodName, properties, parameters, configuration); break;*/\n    case \"csvFunctions\" : await onexecuteCSVFunctions(methodName, properties, parameters, configuration); break;\n    case \"jobFunctions\" : await onexecuteJobFunctions(methodName, properties, parameters, configuration); break;\n    default: throw new Error(\"The object \" + objectName + \" is not supported.\");\n  }\n}\n"],"names":["Base64","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","i","_utf8_encode","length","charCodeAt","isNaN","this","charAt","decode","replace","indexOf","String","fromCharCode","_utf8_decode","string","utftext","n","c","c2","c3","ID","Name","Value","SFName","SFValue","SFCombinedString","Column1","Column2","Column3","Column4","Column5","Column6","Column7","Column8","Column9","Column10","Column11","Column12","Column13","Column14","Column15","Column16","Column17","Column18","Column19","Column20","Column21","Column22","Column23","Column24","Column25","Column26","Column27","Column28","Column29","Column30","Column31","Column32","Column33","Column34","Column35","Column36","Column37","Column38","Column39","Column40","Column41","Column42","Column43","Column44","Column45","Column46","Column47","Column48","Column49","Column50","Column51","Column52","Column53","Column54","Column55","Column56","Column57","Column58","Column59","Column60","Column61","csvFunctions","displayName","description","properties","csv","type","methods","readCSV","inputs","outputs","readCsvRow","listHeaders","readRowHeaders","combineString","onexecuteCSVFunctions","methodName","parameters","configuration","onexecuteReadCsv","onexecuteReadCSVRow","onexecutelistHeaders","onexecutecombineString","Error","getBase64FromContent","content","split","Promise","resolve","reject","console","log","combined","pnames","toString","pvalue","names","values","postResult","lines","reg","RegExp","counter","obj","map","x","cells","e","csvStr","indexToFind","headerRow","workingRow","resobj","workingCells","objArr","jobFunctions","jobId","resultCode","message","csvFile","csvFileContent","oldHeader","newHeader","sobrId","csvString","createJob","instanceUrl","version","token","sfobject","le","updateJobState","uploadJobData","convertAndUploadJobData","createCSVAndUploadJobData","onexecuteJobFunctions","onexecuteUpdateJobState","onexecuteUploadJobData","onexecuteConvertAndUploadJobData","onexecuteCreateJob","onexecutecreateCSVAndUploadJobData","data","JSON","stringify","xhr","XMLHttpRequest","withCredentials","onreadystatechange","readyState","status","concat","statusText","response","open","setRequestHeader","send","respJSON","parse","responseText","id","oldHdr","newHdr","workingCsvStr","metadata","systemName","ondescribe","postSchema","objects","onexecute","objectName"],"mappings":"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"}